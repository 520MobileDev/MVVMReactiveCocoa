//
//  MRCWebViewController.m
//  MVVMReactiveCocoa
//
//  Created by leichunfeng on 15/1/24.
//  Copyright (c) 2015å¹´ leichunfeng. All rights reserved.
//

#import "MRCWebViewController.h"

@interface MRCWebViewController () <UIWebViewDelegate>

@end

@implementation MRCWebViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSString *html = @"<h1><aid=\"user-content-reactivecocoa\"class=\"anchor\"href=\"#reactivecocoa\"aria-hidden=\"true\"><spanclass=\"octicon octicon-link\"></span></a>ReactiveCocoa</h1><p>ReactiveCocoa(RAC)isanObjective-Cframeworkinspiredby<ahref=\"http://en.wikipedia.org/wiki/Functional_reactive_programming\">FunctionalReactiveProgramming</a>.ItprovidesAPIsfor<strong>composingandtransformingstreamsofvalues</strong>.</p><p>Ifyou're already familiar with functional reactive programming or know the basic premise of ReactiveCocoa, check out the <a href=\"Documentation\">Documentation</a> folder for a framework overview and more in-depth information about how it all works in practice.</p>  <h2> <a id=\"user-content-new-to-reactivecocoa\" class=\"anchor\" href=\"#new-to-reactivecocoa\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>New to ReactiveCocoa?</h2>  <p>ReactiveCocoa is documented like crazy, and there'sawealthofintroductorymaterialavailabletoexplainwhatRACisandhowyoucanuseit.</p><p>Ifyouwanttolearnmore,werecommendtheseresources,roughlyinorder:</p><ol><li><ahref=\"#introduction\">Introduction</a></li><li><ahref=\"#when-to-use-reactivecocoa\">WhentouseReactiveCocoa</a></li><li><ahref=\"Documentation/FrameworkOverview.md\">FrameworkOverview</a></li><li><ahref=\"Documentation/BasicOperators.md\">BasicOperators</a></li><li><ahref=\"ReactiveCocoaFramework/ReactiveCocoa\">Headerdocumentation</a></li><li>Previouslyanswered<ahref=\"https://github.com/ReactiveCocoa/ReactiveCocoa/wiki\">StackOverflow</a>questionsand<ahref=\"https://github.com/ReactiveCocoa/ReactiveCocoa/issues?labels=question&amp;state=closed\">GitHubissues</a></li><li>Therestofthe<ahref=\"Documentation\">Documentation</a>folder</li><li><ahref=\"https://leanpub.com/iosfrp/\">FunctionalReactiveProgrammingoniOS</a>(eBook)</li></ol><p>Ifyouhaveanyfurtherquestions,pleasefeelfreeto<ahref=\"https://github.com/ReactiveCocoa/ReactiveCocoa/issues/new\">fileanissue</a>.</p><h2><aid=\"user-content-introduction\"class=\"anchor\"href=\"#introduction\"aria-hidden=\"true\"><spanclass=\"octicon octicon-link\"></span></a>Introduction</h2><p>ReactiveCocoaisinspiredby<ahref=\"http://blog.maybeapps.com/post/42894317939/input-and-output\">functionalreactiveprogramming</a>.Ratherthanusingmutablevariableswhicharereplacedandmodifiedin-place,RACprovidessignals(representedby<code>RACSignal</code>)thatcapturepresentandfuturevalues.</p><p>Bychaining,combining,andreactingtosignals,softwarecanbewrittendeclaratively,withouttheneedforcodethatcontinuallyobservesandupdatesvalues.</p><p>Forexample,atextfieldcanbeboundtothelatesttime,evenasitchanges,insteadofusingadditionalcodethatwatchestheclockandupdatesthetextfieldeverysecond.ItworksmuchlikeKVO,butwithblocksinsteadofoverriding<code>-observeValueForKeyPath:ofObject:change:context:</code>.</p><p>Signalscanalsorepresentasynchronousoperations,muchlike<ahref=\"http://en.wikipedia.org/wiki/Futures_and_promises\">futuresandpromises</a>.Thisgreatlysimplifiesasynchronoussoftware,includingnetworkingcode.</p><p>OneofthemajoradvantagesofRACisthatitprovidesasingle,unifiedapproachtodealingwithasynchronousbehaviors,includingdelegatemethods,callbackblocks,target-actionmechanisms,notifications,andKVO.</p><p>Here's a simple example:</p>  <div class=\"highlight highlight-objc\"><pre><span class=\"pl-c\">// When self.username changes, logs the new name to the console.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// RACObserve(self, username) creates a new RACSignal that sends the current</span> <span class=\"pl-c\">// value of self.username, then the new value whenever it changes.</span> <span class=\"pl-c\">// -subscribeNext: will execute the block whenever the signal sends a value.</span> [<span class=\"pl-s3\">RACObserve</span>(<span class=\"pl-v\">self</span>, username) <span class=\"pl-s3\">subscribeNext:</span>^(<span class=\"pl-s3\">NSString</span> *newName) {     <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span><span class=\"pl-c1\">%@</span><span class=\"pl-pds\">\"</span></span>, newName); }];</pre></div>  <p>But unlike KVO notifications, signals can be chained together and operated on:</p>  <div class=\"highlight highlight-objc\"><pre><span class=\"pl-c\">// Only logs names that starts with \"j\".</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// -filter returns a new RACSignal that only sends a new value when its block</span> <span class=\"pl-c\">// returns YES.</span> [[<span class=\"pl-s3\">RACObserve</span>(<span class=\"pl-v\">self</span>, username)     filter:^(<span class=\"pl-s3\">NSString</span> *newName) {         <span class=\"pl-k\">return</span> [newName <span class=\"pl-s3\">hasPrefix:</span><span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>j<span class=\"pl-pds\">\"</span></span>];     }]     subscribeNext:^(<span class=\"pl-s3\">NSString</span> *newName) {         <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span><span class=\"pl-c1\">%@</span><span class=\"pl-pds\">\"</span></span>, newName);     }];</pre></div>  <p>Signals can also be used to derive state. Instead of observing properties and setting other properties in response to the new values, RAC makes it possible to express properties in terms of signals and operations:</p>  <div class=\"highlight highlight-objc\"><pre><span class=\"pl-c\">// Creates a one-way binding so that self.createEnabled will be</span> <span class=\"pl-c\">// true whenever self.password and self.passwordConfirmation</span> <span class=\"pl-c\">// are equal.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// RAC() is a macro that makes the binding look nicer.</span> <span class=\"pl-c\">// </span> <span class=\"pl-c\">// +combineLatest:reduce: takes an array of signals, executes the block with the</span> <span class=\"pl-c\">// latest value from each signal whenever any of them changes, and returns a new</span> <span class=\"pl-c\">// RACSignal that sends the return value of that block as values.</span> <span class=\"pl-en\">RAC</span>(self, createEnabled) = [RACSignal      combineLatest:@[ RACObserve(self, password), RACObserve(self, passwordConfirmation) ]      reduce:^(<span class=\"pl-s3\">NSString</span> *password, <span class=\"pl-s3\">NSString</span> *passwordConfirm) {         <span class=\"pl-k\">return</span> @([passwordConfirm <span class=\"pl-s3\">isEqualToString:</span>password]);     }];</pre></div>  <p>Signals can be built on any stream of values over time, not just KVO. For example, they can also represent button presses:</p>  <div class=\"highlight highlight-objc\"><pre><span class=\"pl-c\">// Logs a message whenever the button is pressed.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// RACCommand creates signals to represent UI actions. Each signal can</span> <span class=\"pl-c\">// represent a button press, for example, and have additional work associated</span> <span class=\"pl-c\">// with it.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// -rac_command is an addition to NSButton. The button will send itself on that</span> <span class=\"pl-c\">// command whenever it'spressed.</span>self.button.rac_command=[[RACCommand<spanclass=\"pl-s3\">alloc</span>]<spanclass=\"pl-s3\">initWithSignalBlock:</span>^(<spanclass=\"pl-st\">id</span>_){<spanclass=\"pl-s3\">NSLog</span>(<spanclass=\"pl-s1\"><spanclass=\"pl-pds\">@\"</span>button was pressed!<span class=\"pl-pds\">\"</span></span>);<spanclass=\"pl-k\">return</span>[RACSignal<spanclass=\"pl-s3\">empty</span>];}];</pre></div><p>Orasynchronousnetworkoperations:</p><divclass=\"highlight highlight-objc\"><pre><spanclass=\"pl-c\">//Hooksupa\"Log in\"buttontologinoverthenetwork.</span><spanclass=\"pl-c\">//</span><spanclass=\"pl-c\">//Thisblockwillberunwheneverthelogincommandisexecuted,starting</span><spanclass=\"pl-c\">//theloginprocess.</span>self.loginCommand=[[RACCommand<spanclass=\"pl-s3\">alloc</span>]<spanclass=\"pl-s3\">initWithSignalBlock:</span>^(<spanclass=\"pl-st\">id</span>sender){<spanclass=\"pl-c\">//Thehypothetical-logInmethodreturnsasignalthatsendsavaluewhen</span><spanclass=\"pl-c\">//thenetworkrequestfinishes.</span><spanclass=\"pl-k\">return</span>[client<spanclass=\"pl-s3\">logIn</span>];}];<spanclass=\"pl-c\">//-executionSignalsreturnsasignalthatincludesthesignalsreturnedfrom</span><spanclass=\"pl-c\">//theaboveblock,oneforeachtimethecommandisexecuted.</span>[<spanclass=\"pl-v\">self</span>.loginCommand.executionSignals<spanclass=\"pl-s3\">subscribeNext:</span>^(RACSignal*loginSignal){<spanclass=\"pl-c\">//Logamessagewheneverweloginsuccessfully.</span>[loginSignal<spanclass=\"pl-s3\">subscribeCompleted:</span>^{<spanclass=\"pl-s3\">NSLog</span>(<spanclass=\"pl-s1\"><spanclass=\"pl-pds\">@\"</span>Logged in successfully!<span class=\"pl-pds\">\"</span></span>);}];}];<spanclass=\"pl-c\">//Executesthelogincommandwhenthebuttonispressed.</span>self.loginButton.rac_command=self.loginCommand;</pre></div><p>Signalscanalsorepresenttimers,otherUIevents,oranythingelsethatchangesovertime.</p><p>Usingsignalsforasynchronousoperationsmakesitpossibletobuildupmorecomplexbehaviorbychainingandtransformingthosesignals.Workcaneasilybetriggeredafteragroupofoperationscompletes:</p><divclass=\"highlight highlight-objc\"><pre><spanclass=\"pl-c\">//Performs2networkoperationsandlogsamessagetotheconsolewhentheyare</span><spanclass=\"pl-c\">//bothcompleted.</span><spanclass=\"pl-c\">//</span><spanclass=\"pl-c\">//+merge:takesanarrayofsignalsandreturnsanewRACSignalthatpasses</span><spanclass=\"pl-c\">//throughthevaluesofallofthesignalsandcompleteswhenallofthe</span><spanclass=\"pl-c\">//signalscomplete.</span><spanclass=\"pl-c\">//</span><spanclass=\"pl-c\">//-subscribeCompleted:willexecutetheblockwhenthesignalcompletes.</span>[[RACSignalmerge:@[[client<spanclass=\"pl-s3\">fetchUserRepos</span>],[client<spanclass=\"pl-s3\">fetchOrgRepos</span>]]]subscribeCompleted:^{<spanclass=\"pl-s3\">NSLog</span>(<spanclass=\"pl-s1\"><spanclass=\"pl-pds\">@\"</span>They're both done!<span class=\"pl-pds\">\"</span></span>);}];</pre></div><p>Signalscanbechainedtosequentiallyexecuteasynchronousoperations,insteadofnestingcallbackswithblocks.Thisissimilartohow<ahref=\"http://en.wikipedia.org/wiki/Futures_and_promises\">futuresandpromises</a>areusuallyused:</p><divclass=\"highlight highlight-objc\"><pre><spanclass=\"pl-c\">//Logsintheuser,thenloadsanycachedmessages,thenfetchestheremaining</span><spanclass=\"pl-c\">//messagesfromtheserver.Afterthat's all done, logs a message to the</span> <span class=\"pl-c\">// console.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// The hypothetical -logInUser methods returns a signal that completes after</span> <span class=\"pl-c\">// logging in.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// -flattenMap: will execute its block whenever the signal sends a value, and</span> <span class=\"pl-c\">// returns a new RACSignal that merges all of the signals returned from the block</span> <span class=\"pl-c\">// into a single signal.</span> [[[[client      logInUser]      flattenMap:^(User *user) {         <span class=\"pl-c\">// Return a signal that loads cached messages for the user.</span>         <span class=\"pl-k\">return</span> [client <span class=\"pl-s3\">loadCachedMessagesForUser:</span>user];     }]     flattenMap:^(<span class=\"pl-s3\">NSArray</span> *messages) {         <span class=\"pl-c\">// Return a signal that fetches any remaining messages.</span>         <span class=\"pl-k\">return</span> [client <span class=\"pl-s3\">fetchMessagesAfterMessage:</span>messages.lastObject];     }]     subscribeNext:^(<span class=\"pl-s3\">NSArray</span> *newMessages) {         <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>New messages: <span class=\"pl-c1\">%@</span><span class=\"pl-pds\">\"</span></span>, newMessages);     } completed:^{         <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>Fetched all messages.<span class=\"pl-pds\">\"</span></span>);     }];</pre></div>  <p>RAC even makes it easy to bind to the result of an asynchronous operation:</p>  <div class=\"highlight highlight-objc\"><pre><span class=\"pl-c\">// Creates a one-way binding so that self.imageView.image will be set the user's</span><spanclass=\"pl-c\">//avatarassoonasit's downloaded.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// The hypothetical -fetchUserWithUsername: method returns a signal which sends</span> <span class=\"pl-c\">// the user.</span> <span class=\"pl-c\">//</span> <span class=\"pl-c\">// -deliverOn: creates new signals that will do their work on other queues. In</span> <span class=\"pl-c\">// this example, it'susedtomoveworktoabackgroundqueueandthenbacktothemainthread.</span><spanclass=\"pl-c\">//</span><spanclass=\"pl-c\">//-map:callsitsblockwitheachuserthat's fetched and returns a new</span> <span class=\"pl-c\">// RACSignal that sends values returned from the block.</span> <span class=\"pl-en\">RAC</span>(self.imageView, image) = [[[[client      fetchUserWithUsername:@\"joshaber\"]     deliverOn:[RACScheduler scheduler]]     map:^(User *user) {         <span class=\"pl-c\">// Download the avatar (this is done on a background queue).</span>         <span class=\"pl-k\">return</span> [[<span class=\"pl-s3\">NSImage</span> <span class=\"pl-s3\">alloc</span>] <span class=\"pl-s3\">initWithContentsOfURL:</span>user.avatarURL];     }]     <span class=\"pl-c\">// Now the assignment will be done on the main thread.</span>     deliverOn:RACScheduler.mainThreadScheduler];</pre></div>  <p>That demonstrates some of what RAC can do, but it doesn'tdemonstratewhyRACissopowerful.It's hard to appreciate RAC from README-sized examples, but it makes it possible to write code with less state, less boilerplate, better code locality, and better expression of intent.</p>  <p>For more sample code, check out <a href=\"https://github.com/AshFurrow/C-41\">C-41</a> or <a href=\"https://github.com/jspahrsummers/GroceryList\">GroceryList</a>, which are real iOS apps written using ReactiveCocoa. Additional information about RAC can be found in the <a href=\"Documentation\">Documentation</a> folder.</p>  <h2> <a id=\"user-content-when-to-use-reactivecocoa\" class=\"anchor\" href=\"#when-to-use-reactivecocoa\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>When to use ReactiveCocoa</h2>  <p>Upon first glance, ReactiveCocoa is very abstract, and it can be difficult to understand how to apply it to concrete problems.</p>  <p>Here are some of the use cases that RAC excels at.</p>  <h3> <a id=\"user-content-handling-asynchronous-or-event-driven-data-sources\" class=\"anchor\" href=\"#handling-asynchronous-or-event-driven-data-sources\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Handling asynchronous or event-driven data sources</h3>  <p>Much of Cocoa programming is focused on reacting to user events or changes in application state. Code that deals with such events can quickly become very complex and spaghetti-like, with lots of callbacks and state variables to handle ordering issues.</p>  <p>Patterns that seem superficially different, like UI callbacks, network responses, and KVO notifications, actually have a lot in common. <a href=\"ReactiveCocoaFramework/ReactiveCocoa/RACSignal.h\">RACSignal</a> unifies all these different APIs so that they can be composed together and manipulated in the same way.</p>  <p>For example, the following code:</p>  <div class=\"highlight highlight-objc\"><pre> <span class=\"pl-s\">static</span> <span class=\"pl-st\">void</span> *ObservationContext = &amp;ObservationContext;  - (<span class=\"pl-st\">void</span>)viewDidLoad {     [<span class=\"pl-v\">super</span> <span class=\"pl-s3\">viewDidLoad</span>];      [LoginManager.sharedManager <span class=\"pl-s3\">addObserver:</span><span class=\"pl-v\">self</span> <span class=\"pl-s3\">forKeyPath:</span><span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>loggingIn<span class=\"pl-pds\">\"</span></span> <span class=\"pl-s3\">options:</span>NSKeyValueObservingOptionInitial <span class=\"pl-s3\">context:</span>&amp;ObservationContext];     [<span class=\"pl-s3\">NSNotificationCenter</span>.defaultCenter <span class=\"pl-s3\">addObserver:</span><span class=\"pl-v\">self</span> <span class=\"pl-s3\">selector:</span><span class=\"pl-st\">@selector</span>(<span class=\"pl-s3\">loggedOut:</span>) <span class=\"pl-s3\">name:</span>UserDidLogOutNotification <span class=\"pl-s3\">object:</span>LoginManager.sharedManager];      [<span class=\"pl-v\">self</span>.usernameTextField <span class=\"pl-s3\">addTarget:</span><span class=\"pl-v\">self</span> <span class=\"pl-s3\">action:</span><span class=\"pl-st\">@selector</span>(<span class=\"pl-s3\">updateLogInButton</span>) <span class=\"pl-s3\">forControlEvents:</span>UIControlEventEditingChanged];     [<span class=\"pl-v\">self</span>.passwordTextField <span class=\"pl-s3\">addTarget:</span><span class=\"pl-v\">self</span> <span class=\"pl-s3\">action:</span><span class=\"pl-st\">@selector</span>(<span class=\"pl-s3\">updateLogInButton</span>) <span class=\"pl-s3\">forControlEvents:</span>UIControlEventEditingChanged];     [<span class=\"pl-v\">self</span>.logInButton <span class=\"pl-s3\">addTarget:</span><span class=\"pl-v\">self</span> <span class=\"pl-s3\">action:</span><span class=\"pl-st\">@selector</span>(<span class=\"pl-s3\">logInPressed:</span>) <span class=\"pl-s3\">forControlEvents:</span>UIControlEventTouchUpInside]; }  - (<span class=\"pl-st\">void</span>)dealloc {     [LoginManager.sharedManager <span class=\"pl-s3\">removeObserver:</span><span class=\"pl-v\">self</span> <span class=\"pl-s3\">forKeyPath:</span><span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>loggingIn<span class=\"pl-pds\">\"</span></span> <span class=\"pl-s3\">context:</span>ObservationContext];     [<span class=\"pl-s3\">NSNotificationCenter</span>.defaultCenter <span class=\"pl-s3\">removeObserver:</span><span class=\"pl-v\">self</span>]; }  - (<span class=\"pl-st\">void</span>)updateLogInButton {     <span class=\"pl-st\">BOOL</span> textFieldsNonEmpty = self.<span class=\"pl-vo\">usernameTextField</span>.<span class=\"pl-vo\">text</span>.<span class=\"pl-vo\">length</span> &gt; <span class=\"pl-c1\">0</span> &amp;&amp; self.<span class=\"pl-vo\">passwordTextField</span>.<span class=\"pl-vo\">text</span>.<span class=\"pl-vo\">length</span> &gt; <span class=\"pl-c1\">0</span>;     <span class=\"pl-st\">BOOL</span> readyToLogIn = !LoginManager.<span class=\"pl-vo\">sharedManager</span>.<span class=\"pl-vo\">isLoggingIn</span> &amp;&amp; !self.<span class=\"pl-vo\">loggedIn</span>;     self.<span class=\"pl-vo\">logInButton</span>.<span class=\"pl-vo\">enabled</span> = textFieldsNonEmpty &amp;&amp; readyToLogIn; }  - (<span class=\"pl-st\">IBAction</span>)logInPressed:(UIButton *)sender {     [[LoginManager <span class=\"pl-s3\">sharedManager</span>]         logInWithUsername:<span class=\"pl-v\">self</span>.usernameTextField.text         password:<span class=\"pl-v\">self</span>.passwordTextField.text         success:^{             self.<span class=\"pl-vo\">loggedIn</span> = <span class=\"pl-c1\">YES</span>;         } failure:^(<span class=\"pl-s3\">NSError</span> *error) {             [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">presentError:</span>error];         }]; }  - (<span class=\"pl-st\">void</span>)loggedOut:(<span class=\"pl-s3\">NSNotification</span> *)notification {     self.<span class=\"pl-vo\">loggedIn</span> = <span class=\"pl-c1\">NO</span>; }  - (<span class=\"pl-st\">void</span>)observeValueForKeyPath:(<span class=\"pl-s3\">NSString</span> *)keyPath ofObject:(<span class=\"pl-st\">id</span>)object change:(<span class=\"pl-s3\">NSDictionary</span> *)change context:(<span class=\"pl-st\">void</span> *)context {     <span class=\"pl-k\">if</span> (context == ObservationContext) {         [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">updateLogInButton</span>];     } <span class=\"pl-k\">else</span> {         [<span class=\"pl-v\">super</span> <span class=\"pl-s3\">observeValueForKeyPath:</span>keyPath <span class=\"pl-s3\">ofObject:</span>object <span class=\"pl-s3\">change:</span>change <span class=\"pl-s3\">context:</span>context];     } }</pre></div>  <p>â¦ could be expressed in RAC like so:</p>  <div class=\"highlight highlight-objc\"><pre>- (<span class=\"pl-st\">void</span>)viewDidLoad {     [<span class=\"pl-v\">super</span> <span class=\"pl-s3\">viewDidLoad</span>];      @<span class=\"pl-s3\">weakify</span>(self);      <span class=\"pl-s3\">RAC</span>(self.<span class=\"pl-vo\">logInButton</span>, enabled) = [RACSignal         combineLatest:@[             <span class=\"pl-v\">self</span>.usernameTextField.rac_textSignal,             <span class=\"pl-v\">self</span>.passwordTextField.rac_textSignal,             <span class=\"pl-s3\">RACObserve</span>(LoginManager.sharedManager, loggingIn),             <span class=\"pl-s3\">RACObserve</span>(<span class=\"pl-v\">self</span>, loggedIn)         ] <span class=\"pl-s3\">reduce:</span>^(<span class=\"pl-s3\">NSString</span> *username, <span class=\"pl-s3\">NSString</span> *password, <span class=\"pl-s3\">NSNumber</span> *loggingIn, <span class=\"pl-s3\">NSNumber</span> *loggedIn) {             <span class=\"pl-k\">return</span> @(username.<span class=\"pl-vo\">length</span> &gt; <span class=\"pl-c1\">0</span> &amp;&amp; password.<span class=\"pl-vo\">length</span> &gt; <span class=\"pl-c1\">0</span> &amp;&amp; !loggingIn.<span class=\"pl-vo\">boolValue</span> &amp;&amp; !loggedIn.<span class=\"pl-vo\">boolValue</span>);         }];      [[<span class=\"pl-v\">self</span>.logInButton <span class=\"pl-s3\">rac_signalForControlEvents:</span>UIControlEventTouchUpInside] <span class=\"pl-s3\">subscribeNext:</span>^(UIButton *sender) {         @<span class=\"pl-s3\">strongify</span>(self);          RACSignal *loginSignal = [LoginManager.sharedManager             logInWithUsername:<span class=\"pl-v\">self</span>.usernameTextField.text             password:<span class=\"pl-v\">self</span>.passwordTextField.text];              [loginSignal <span class=\"pl-s3\">subscribeError:</span>^(<span class=\"pl-s3\">NSError</span> *error) {                 @<span class=\"pl-s3\">strongify</span>(self);                 [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">presentError:</span>error];             } <span class=\"pl-s3\">completed:</span>^{                 @<span class=\"pl-s3\">strongify</span>(self);                 self.<span class=\"pl-vo\">loggedIn</span> = <span class=\"pl-c1\">YES</span>;             }];     }];      <span class=\"pl-s3\">RAC</span>(self, loggedIn) = [[<span class=\"pl-s3\">NSNotificationCenter</span>.defaultCenter         rac_addObserverForName:UserDidLogOutNotification <span class=\"pl-s3\">object:</span><span class=\"pl-c1\">nil</span>]         mapReplace:@<span class=\"pl-c1\">NO</span>]; }</pre></div>  <h3> <a id=\"user-content-chaining-dependent-operations\" class=\"anchor\" href=\"#chaining-dependent-operations\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Chaining dependent operations</h3>  <p>Dependencies are most often found in network requests, where a previous request to the server needs to complete before the next one can be constructed, and so on:</p>  <div class=\"highlight highlight-objc\"><pre>[client <span class=\"pl-s3\">logInWithSuccess:</span>^{     [client <span class=\"pl-s3\">loadCachedMessagesWithSuccess:</span>^(<span class=\"pl-s3\">NSArray</span> *messages) {         [client <span class=\"pl-s3\">fetchMessagesAfterMessage:</span>messages.lastObject <span class=\"pl-s3\">success:</span>^(<span class=\"pl-s3\">NSArray</span> *nextMessages) {             <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>Fetched all messages.<span class=\"pl-pds\">\"</span></span>);         } <span class=\"pl-s3\">failure:</span>^(<span class=\"pl-s3\">NSError</span> *error) {             [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">presentError:</span>error];         }];     } <span class=\"pl-s3\">failure:</span>^(<span class=\"pl-s3\">NSError</span> *error) {         [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">presentError:</span>error];     }]; } <span class=\"pl-s3\">failure:</span>^(<span class=\"pl-s3\">NSError</span> *error) {     [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">presentError:</span>error]; }];</pre></div>  <p>ReactiveCocoa makes this pattern particularly easy:</p>  <div class=\"highlight highlight-objc\"><pre>[[[[client <span class=\"pl-s3\">logIn</span>]     then:^{         <span class=\"pl-k\">return</span> [client <span class=\"pl-s3\">loadCachedMessages</span>];     }]     flattenMap:^(<span class=\"pl-s3\">NSArray</span> *messages) {         <span class=\"pl-k\">return</span> [client <span class=\"pl-s3\">fetchMessagesAfterMessage:</span>messages.lastObject];     }]     subscribeError:^(<span class=\"pl-s3\">NSError</span> *error) {         [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">presentError:</span>error];     } completed:^{         <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>Fetched all messages.<span class=\"pl-pds\">\"</span></span>);     }];</pre></div>  <h3> <a id=\"user-content-parallelizing-independent-work\" class=\"anchor\" href=\"#parallelizing-independent-work\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Parallelizing independent work</h3>  <p>Working with independent data sets in parallel and then combining them into a final result is non-trivial in Cocoa, and often involves a lot of synchronization:</p>  <div class=\"highlight highlight-objc\"><pre>__block <span class=\"pl-s3\">NSArray</span> *databaseObjects; __block <span class=\"pl-s3\">NSArray</span> *fileContents;  <span class=\"pl-s3\">NSOperationQueue</span> *backgroundQueue = [[<span class=\"pl-s3\">NSOperationQueue</span> <span class=\"pl-s3\">alloc</span>] <span class=\"pl-s3\">init</span>]; <span class=\"pl-s3\">NSBlockOperation</span> *databaseOperation = [<span class=\"pl-s3\">NSBlockOperation</span> <span class=\"pl-s3\">blockOperationWithBlock:</span>^{     databaseObjects = [databaseClient <span class=\"pl-s3\">fetchObjectsMatchingPredicate:</span>predicate]; }];  <span class=\"pl-s3\">NSBlockOperation</span> *filesOperation = [<span class=\"pl-s3\">NSBlockOperation</span> <span class=\"pl-s3\">blockOperationWithBlock:</span>^{     <span class=\"pl-s3\">NSMutableArray</span> *filesInProgress = [<span class=\"pl-s3\">NSMutableArray</span> <span class=\"pl-s3\">array</span>];     <span class=\"pl-k\">for</span> (<span class=\"pl-s3\">NSString</span> *path in files) {         [filesInProgress <span class=\"pl-s3\">addObject:</span>[<span class=\"pl-s3\">NSData</span> <span class=\"pl-s3\">dataWithContentsOfFile:</span>path]];     }      fileContents = [filesInProgress <span class=\"pl-s3\">copy</span>]; }];  <span class=\"pl-s3\">NSBlockOperation</span> *finishOperation = [<span class=\"pl-s3\">NSBlockOperation</span> <span class=\"pl-s3\">blockOperationWithBlock:</span>^{     [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">finishProcessingDatabaseObjects:</span>databaseObjects <span class=\"pl-s3\">fileContents:</span>fileContents];     <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>Done processing<span class=\"pl-pds\">\"</span></span>); }];  [finishOperation <span class=\"pl-s3\">addDependency:</span>databaseOperation]; [finishOperation <span class=\"pl-s3\">addDependency:</span>filesOperation]; [backgroundQueue <span class=\"pl-s3\">addOperation:</span>databaseOperation]; [backgroundQueue <span class=\"pl-s3\">addOperation:</span>filesOperation]; [backgroundQueue <span class=\"pl-s3\">addOperation:</span>finishOperation];</pre></div>  <p>The above code can be cleaned up and optimized by simply composing signals:</p>  <div class=\"highlight highlight-objc\"><pre>RACSignal *databaseSignal = [[databaseClient     fetchObjectsMatchingPredicate:predicate]     subscribeOn:[RACScheduler <span class=\"pl-s3\">scheduler</span>]];  RACSignal *fileSignal = [RACSignal <span class=\"pl-s3\">startEagerlyWithScheduler:</span>[RACScheduler <span class=\"pl-s3\">scheduler</span>] <span class=\"pl-s3\">block:</span>^(<span class=\"pl-st\">id</span>&lt;RACSubscriber&gt; subscriber) {     <span class=\"pl-s3\">NSMutableArray</span> *filesInProgress = [<span class=\"pl-s3\">NSMutableArray</span> <span class=\"pl-s3\">array</span>];     <span class=\"pl-k\">for</span> (<span class=\"pl-s3\">NSString</span> *path in files) {         [filesInProgress <span class=\"pl-s3\">addObject:</span>[<span class=\"pl-s3\">NSData</span> <span class=\"pl-s3\">dataWithContentsOfFile:</span>path]];     }      [subscriber <span class=\"pl-s3\">sendNext:</span>[filesInProgress <span class=\"pl-s3\">copy</span>]];     [subscriber <span class=\"pl-s3\">sendCompleted</span>]; }];  [[RACSignal     combineLatest:@[ databaseSignal, fileSignal ]     reduce:^ <span class=\"pl-s3\">id</span> (<span class=\"pl-s3\">NSArray</span> *databaseObjects, <span class=\"pl-s3\">NSArray</span> *fileContents) {         [<span class=\"pl-v\">self</span> <span class=\"pl-s3\">finishProcessingDatabaseObjects:</span>databaseObjects <span class=\"pl-s3\">fileContents:</span>fileContents];         <span class=\"pl-k\">return</span> <span class=\"pl-c1\">nil</span>;     }]     subscribeCompleted:^{         <span class=\"pl-s3\">NSLog</span>(<span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>Done processing<span class=\"pl-pds\">\"</span></span>);     }];</pre></div>  <h3> <a id=\"user-content-simplifying-collection-transformations\" class=\"anchor\" href=\"#simplifying-collection-transformations\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Simplifying collection transformations</h3>  <p>Higher-order functions like <code>map</code>, <code>filter</code>, <code>fold</code>/<code>reduce</code> are sorely missing from Foundation, leading to loop-focused code like this:</p>  <div class=\"highlight highlight-objc\"><pre><span class=\"pl-s3\">NSMutableArray</span> *results = [<span class=\"pl-s3\">NSMutableArray</span> <span class=\"pl-s3\">array</span>]; <span class=\"pl-k\">for</span> (<span class=\"pl-s3\">NSString</span> *str in strings) {     <span class=\"pl-k\">if</span> (str.<span class=\"pl-vo\">length</span> &lt; <span class=\"pl-c1\">2</span>) {         <span class=\"pl-k\">continue</span>;     }      <span class=\"pl-s3\">NSString</span> *newString = [str <span class=\"pl-s3\">stringByAppendingString:</span><span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>foobar<span class=\"pl-pds\">\"</span></span>];     [results <span class=\"pl-s3\">addObject:</span>newString]; }</pre></div>  <p><a href=\"ReactiveCocoaFramework/ReactiveCocoa/RACSequence.h\">RACSequence</a> allows any Cocoa collection to be manipulated in a uniform and declarative way:</p>  <div class=\"highlight highlight-objc\"><pre>RACSequence *results = [[strings.rac_sequence     filter:^ <span class=\"pl-s3\">BOOL</span> (<span class=\"pl-s3\">NSString</span> *str) {         <span class=\"pl-k\">return</span> str.<span class=\"pl-vo\">length</span> &gt;= <span class=\"pl-c1\">2</span>;     }]     map:^(<span class=\"pl-s3\">NSString</span> *str) {         <span class=\"pl-k\">return</span> [str <span class=\"pl-s3\">stringByAppendingString:</span><span class=\"pl-s1\"><span class=\"pl-pds\">@\"</span>foobar<span class=\"pl-pds\">\"</span></span>];     }];</pre></div>  <h2> <a id=\"user-content-system-requirements\" class=\"anchor\" href=\"#system-requirements\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>System Requirements</h2>  <p>ReactiveCocoa supports OS X 10.7+ and iOS 5.0+.</p>  <h2> <a id=\"user-content-importing-reactivecocoa\" class=\"anchor\" href=\"#importing-reactivecocoa\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Importing ReactiveCocoa</h2>  <p>To add RAC to your application:</p>  <ol> <li>Add the ReactiveCocoa repository as a submodule of your application'srepository.</li><li>Run<code>script/bootstrap</code>fromwithintheReactiveCocoafolder.</li><li>Draganddrop<code>ReactiveCocoaFramework/ReactiveCocoa.xcodeproj</code>intoyourapplication's Xcode project or workspace.</li> <li>On the \"Build Phases\" tab of your application target, add RAC to the \"Link Binary With Libraries\" phase.  <ul> <li> <strong>On iOS</strong>, add <code>libReactiveCocoa-iOS.a</code>.</li> <li> <strong>On OS X</strong>, add <code>ReactiveCocoa.framework</code>. RAC must also be added to any \"Copy Frameworks\" build phase. If you don'talreadyhaveone,simplyadda\"Copy Files\"buildphaseandtargetthe\"Frameworks\"destination.</li></ul></li><li>Add<code>\"$(BUILD_ROOT)/../IntermediateBuildFilesPath/UninstalledProducts/include\"$(inherited)</code>tothe\"Header Search Paths\"buildsetting(thisisonlynecessaryforarchivebuilds,butithasnonegativeeffectotherwise).</li><li><strong>ForiOStargets</strong>,add<code>-ObjC</code>tothe\"Other Linker Flags\"buildsetting.</li><li><strong>IfyouaddedRACtoaproject(notaworkspace)</strong>,youwillalsoneedtoaddtheappropriateRACtargettothe\"Target Dependencies\"ofyourapplication.</li></ol><p>Ifyouwouldprefertouse<ahref=\"http://cocoapods.org\">CocoaPods</a>,therearesome<ahref=\"https://github.com/CocoaPods/Specs/tree/master/Specs/ReactiveCocoa\">ReactiveCocoapodspecs</a>thathavebeengenerouslycontributedbythirdparties.</p><p>ToseeaprojectalreadysetupwithRAC,checkout<ahref=\"https://github.com/AshFurrow/C-41\">C-41</a>or<ahref=\"https://github.com/jspahrsummers/GroceryList\">GroceryList</a>,whicharerealiOSappswrittenusingReactiveCocoa.</p><h2><aid=\"user-content-standalone-development\"class=\"anchor\"href=\"#standalone-development\"aria-hidden=\"true\"><spanclass=\"octicon octicon-link\"></span></a>StandaloneDevelopment</h2><p>IfyouâreworkingonRACinisolationinsteadofintegratingitintoanotherproject,youâllwanttoopen<code>ReactiveCocoaFramework/ReactiveCocoa.xcworkspace</code>andnotthe<code>.xcodeproj</code>.</p><h2><aid=\"user-content-more-info\"class=\"anchor\"href=\"#more-info\"aria-hidden=\"true\"><spanclass=\"octicon octicon-link\"></span></a>MoreInfo</h2><p>ReactiveCocoaisbasedon.NET's <a href=\"http://msdn.microsoft.com/en-us/data/gg577609\">Reactive Extensions</a> (Rx). Most of the principles of Rx apply to RAC as well. There are some really good Rx resources out there:</p>  <ul> <li><a href=\"http://msdn.microsoft.com/en-us/library/hh242985.aspx\">Reactive Extensions MSDN entry</a></li> <li><a href=\"http://leecampbell.blogspot.com/2010/08/reactive-extensions-for-net.html\">Reactive Extensions for .NET Introduction</a></li> <li><a href=\"http://channel9.msdn.com/tags/Rx/\">Rx - Channel 9 videos</a></li> <li><a href=\"http://rxwiki.wikidot.com/\">Reactive Extensions wiki</a></li> <li><a href=\"http://rxwiki.wikidot.com/101samples\">101 Rx Samples</a></li> <li><a href=\"http://www.amazon.com/Programming-Reactive-Extensions-Jesse-Liberty/dp/1430237473\">Programming Reactive Extensions and LINQ</a></li> </ul>  <p>RAC and Rx are both frameworks inspired by functional reactive programming. Here  are some resources related to FRP:</p>  <ul> <li><a href=\"http://elm-lang.org/learn/What-is-FRP.elm\">What is FRP? - Elm Language</a></li> <li><a href=\"http://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming/1030631#1030631\">What is Functional Reactive Programming - Stack Overflow</a></li> <li><a href=\"http://stackoverflow.com/questions/5875929/specification-for-a-functional-reactive-programming-language#5878525\">Specification for a Functional Reactive Language - Stack Overflow</a></li> <li><a href=\"http://elm-lang.org/learn/Escape-from-Callback-Hell.elm\">Escape from Callback Hell</a></li> <li><a href=\"https://www.coursera.org/course/reactive\">Principles of Reactive Programming on Coursera</a></li> </ul>  <p>ReactiveCocoa also has a chat room on <a href=\"https://slack.com/\">Slack</a>. If you'dliketojoin,just<ahref=\"https://github.com/ReactiveCocoa/ReactiveCocoa/issues/871#issuecomment-44237545\">provideyouremailaddress</a>andwe'll happily send you an invite!</p>";
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://github.com/octokit/octokit.objc"]];
//    [request setValue:@"application/vnd.github.VERSION.html" forHTTPHeaderField:@"Accept"];
    self.webView.paginationMode = UIWebPaginationModeTopToBottom;
    self.webView.paginationBreakingMode = UIWebPaginationBreakingModePage;
    [self.webView loadRequest:request];
//    [self.webView loadHTMLString:html baseURL:nil];
}

- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];
//    self.webView.scrollView.contentSize = CGSizeMake(CGRectGetWidth(self.view.frame), self.webView.scrollView.contentSize.height);
}

#pragma mark - UIWebViewDelegate

//- (void)webViewDidFinishLoad:(UIWebView *)webView {
//    // ä¿®æ¹æå¡å¨é¡µé¢çmetaçå¼
//    NSString *meta = @"var meta = document.createElement('meta');meta.name = 'viewport';meta.content = 'width=device-width, initial-scale=0.5, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no';document.head.appendChild(meta);";
//    [webView stringByEvaluatingJavaScriptFromString:meta];
//}

@end
